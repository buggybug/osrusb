/*++

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Copyright (c) 2019 Bohdan Yevtukh. All rights reserved.

Module Name:

    OsrUsbDeviceEnumerator.cpp

Abstract:

    This module contains the implementation of the CUsbDeviceEnumerator
    object.

--*/

#include "pch.h"
#include "OsrUsbDeviceEnumerator.h"
#include "OsrUsbApiLogging.h"

#if defined(EVENT_TRACING)
//
// The trace message header (.tmh) file must be included in a source file
// before any WPP macro calls and after defining a WPP_CONTROL_GUIDS
// macro (defined in OsrUsbApiLogging.h). During the compilation, WPP scans
// the source files for OSR_LOG...() calls and builds a .tmh file which stores
// a unique data GUID for each message, the text resource string for each
// message, and the data types of the variables passed in for each message.
// This file is automatically generated and used during post-processing.
//
#include "OsrUsbDeviceEnumerator.tmh"
#endif /* defined(EVENT_TRACING) */

namespace OSR {

//+---------------------------------------------------------------------------
//
// CUsbDeviceEnumerator::CUsbDeviceEnumerator
//
// Object constructor function.
//
//----------------------------------------------------------------------------
CUsbDeviceEnumerator::CUsbDeviceEnumerator() throw()
{
}

//+---------------------------------------------------------------------------
//
// CUsbDeviceEnumerator::EnumerateDevices
//
// Enumerates the OSR USB devices available in the system that may be
// controlled by the DLL.
//
// This function needs to be called once before a device instance can be
// opened via GetDeviceByIndex.
//
// A successful call to this function creates an internal device list which
// represents all supported OSR USB devices available in the system.
// Device instances (USB devices) are addressed by means of a zero-based
// index that is passed to GetDeviceByIndex.
//
// Even if the function succeeds, there may be no devices available in the
// system. An application should call GetDeviceCount to check for available
// devices.
//
// A call to this function invalidates internal device list. After this
// function is called, it is strongly recommended to reopen devices again by
// calling GetDeviceByIndex.      
//
// Parameters:
//      void - (unused argument).
//
// Return Values:
//      S_OK - The method succeeded.
//      E_OUTOFMEMORY - Out of memory.
//
//----------------------------------------------------------------------------
STDMETHODIMP CUsbDeviceEnumerator::EnumerateDevices()
{
    HRESULT hr = E_NOTIMPL;

    OSR_LOG_TRACE("0x%p: Entering %!FUNC!.", this);
    OSR_LOG_TRACE("0x%p: Leaving %!FUNC!: %!HRESULT!.", this, hr);

    return hr;
}

//+---------------------------------------------------------------------------
//
// CUsbDeviceEnumerator::GetDeviceCount
//
// Retrieves the number of known OSR USB devices that are currently connected
// to the computer.
//
// Parameters:
//      pdwDeviceCount - A pointer to a DWORD specifying the count of known
//                       OSR USB devices.
//
// Return Values:
//      S_OK - The method succeeded.
//      E_POINTER - Parameter pdwDeviceCount is NULL.
//
//----------------------------------------------------------------------------
__useHeader STDMETHODIMP CUsbDeviceEnumerator::GetDeviceCount(DWORD* pdwDeviceCount)
{
    HRESULT hr = E_NOTIMPL;

    OSR_LOG_TRACE("0x%p: Entering %!FUNC!(0x%p).", this, pdwDeviceCount);
    OSR_LOG_TRACE("0x%p: Leaving %!FUNC!: %!HRESULT!.", this, hr);

    return hr;
}

//+---------------------------------------------------------------------------
//
// CUsbDeviceEnumerator::GetDeviceByIndex
//
// Retrieves an OSR USB device that is identified by an ID value.
//
// Parameters:
//      dwDeviceId - An OSR USB device ID to obtain.
//      ppDevice   - A pointer to a pointer variable into which the method
//                   writes the address of the IOsrUsbDevice interface for
//                   the specified device. Through this method, the caller
//                   obtains a counted reference to the interface. The caller
//                   is responsible for releasing the interface, when it is no
//                   longer needed, by calling the interface's Release method.
//                   If the GetDevice call fails, *ppDevice is NULL.
//
// Return Values:
//      S_OK - The method succeeded.
//      E_POINTER - Parameter ppDevice is NULL.
//      E_NOTFOUND - The device ID does not identify an OSR USB device that is
//                   in this system.
//      E_OUTOFMEMORY - Out of memory.
//      E_ILLEGAL_METHOD_CALL - The GetDevice is called prior to the
//                              successful EnumerateDevices call.
//
//----------------------------------------------------------------------------
__useHeader STDMETHODIMP CUsbDeviceEnumerator::GetDeviceByIndex(DWORD dwDeviceId, IOsrUsbDevice** ppDevice)
{
    HRESULT hr = E_NOTIMPL;

    OSR_LOG_TRACE("0x%p: Entering %!FUNC!(%lu, 0x%p).", this, dwDeviceId, ppDevice);
    OSR_LOG_TRACE("0x%p: Leaving %!FUNC!: %!HRESULT!.", this, hr);

    return hr;
}

//+---------------------------------------------------------------------------
//
// CUsbDeviceEnumerator::~CUsbDeviceEnumerator
//
// Object destructor function.
//
//----------------------------------------------------------------------------
CUsbDeviceEnumerator::~CUsbDeviceEnumerator() throw()
{
}

}; /* namespace OSR */
